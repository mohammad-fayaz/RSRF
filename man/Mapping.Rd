% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RSRF_Version_1_0.R
\name{Mapping}
\alias{Mapping}
\title{Mapping the functional data into summary statistics by the random splits.}
\usage{
Mapping(
  RawData,
  Stat,
  min,
  max,
  Params = c(0, 0, 0),
  Distribution,
  Params2 = c(0, 0, 0),
  Distribution2,
  type
)
}
\arguments{
\item{RawData}{The functional data that defines in the domain.}

\item{Stat}{The summary statistics for each split including "mean","median","Q25","Q75","sd","max","min","range".}

\item{min}{The minimum value of the domain.}

\item{max}{The maximum value of the domain.}

\item{Params}{The parameters of the distribution. 
In the "Exponential" is (rate, 0,0)
In the "Uniform" is  (min,max,0)
In the "Normal"  is  (Mu, Sigma,0)}

\item{Distribution}{The Distribution name. ("Exponential", "Uniform" and "Normal").}

\item{Params2}{The parameters of the second distribution, if type is "Overlap".
In the "Exponential" is (rate, Constant,0), Constant default is 5. Final rate is rate*Constant.
In the "Uniform" is  (min,max,Constant), Constant default is 5. Final min and max are min/Constant and max/Constant.
In the "Normal"  is  (Mu, Sigma,Constant) , Constant default is 5. Final sd is sd/Constant.}

\item{Distribution2}{The Distribution name. ("Exponential", "Uniform" and "Normal"), if type is "Overlap".}

\item{type}{The type of splitting, "Disjoint" or "Overlap".}
}
\value{
It returns a list:

num: the number of splits.

Rs : the random number.

lr : the minimum value of the split.

ur : the maximum value of the split.
}
\description{
It maps the functional data by the random splits with the summary statistics.
}
\examples{
nSample_1 <- 10  ##Number of samples Group 1
nSample_2 <- 5   ##Number of samples Group 2
SIM_1_FUNC_DATA <- makeSIMData(nSS_1 = nSample_1,nSS_2 =nSample_2, responseType ="Categorical",Seed= 2400)
matplot(t(SIM_1_FUNC_DATA[[3]]),type="l")  ### Plot functional data number 3.
### Mapping the functioanl data into the mean with the random splits from exponential distribtion and rate = 0.05.
set.seed(123)
MAP_Mean <- Mapping(RawData=SIM_1_FUNC_DATA[[3]],Stat=c("mean"), min=0,max=100,Params=c(0.05,0,0),Distribution= "Exponential",Params2=c(0,0,0),Distribution2,type="Disjoint")
set.seed(123)
MAP_Median <- Mapping(RawData=SIM_1_FUNC_DATA[[3]],Stat=c("median"), min=0,max=100,Params=c(0.05,0,0),Distribution= "Exponential",Params2=c(0,0,0),Distribution2,type="Disjoint")
set.seed(123)
MAP_Q25 <- Mapping(RawData=SIM_1_FUNC_DATA[[3]],Stat=c("Q25"), min=0,max=100,Params=c(0.05,0,0),Distribution= "Exponential",Params2=c(0,0,0),Distribution2,type="Disjoint")
set.seed(123)
MAP_Q75 <- Mapping(RawData=SIM_1_FUNC_DATA[[3]],Stat=c("Q75"), min=0,max=100,Params=c(0.05,0,0),Distribution= "Exponential",Params2=c(0,0,0),Distribution2,type="Disjoint")
set.seed(123)
MAP_sd <- Mapping(RawData=SIM_1_FUNC_DATA[[3]],Stat=c("sd"), min=0,max=100,Params=c(0.05,0,0),Distribution= "Exponential",Params2=c(0,0,0),Distribution2,type="Disjoint")
set.seed(123)
MAP_max <- Mapping(RawData=SIM_1_FUNC_DATA[[3]],Stat=c("max"), min=0,max=100,Params=c(0.05,0,0),Distribution= "Exponential",Params2=c(0,0,0),Distribution2,type="Disjoint")
set.seed(123)
MAP_min <- Mapping(RawData=SIM_1_FUNC_DATA[[3]],Stat=c("min"), min=0,max=100,Params=c(0.05,0,0),Distribution= "Exponential",Params2=c(0,0,0),Distribution2,type="Disjoint")
set.seed(123)
MAP_range <- Mapping(RawData=SIM_1_FUNC_DATA[[3]],Stat=c("range"), min=0,max=100,Params=c(0.05,0,0),Distribution= "Exponential",Params2=c(0,0,0),Distribution2,type="Disjoint")
par(mfrow=c(3,3))
matplot(t(SIM_1_FUNC_DATA[[3]])[,15],type="l",xlab = "Time", main="Real Curves")
MINS = min(t(SIM_1_FUNC_DATA[[3]])[,15])
MAXS = max(t(SIM_1_FUNC_DATA[[3]])[,15])
plot(rnorm(1), ylim=c(MINS,MAXS), xlim=c(0,100),type="n",ylab="",main="Mean")
for(i in 1:9){
  lines(y = c(MAP_Mean[[1]]$Curve_15[i],MAP_Mean[[1]]$Curve_15[i]) , x = c(MAP_Mean[[1]]$lr[i], MAP_Mean[[1]]$ur[i]))
}
plot(rnorm(1), ylim=c(MINS,MAXS), xlim=c(0,100),type="n",ylab="",main="Median")
for(i in 1:9){
  lines(y = c(MAP_Median[[1]]$Curve_15[i],MAP_Median[[1]]$Curve_15[i]) , x = c(MAP_Median[[1]]$lr[i], MAP_Median[[1]]$ur[i]))
}
plot(rnorm(1), ylim=c(MINS,MAXS), xlim=c(0,100),type="n",ylab="",main="Q25")
for(i in 1:9){
  lines(y = c(MAP_Q25[[1]]$Curve_15[i],MAP_Q25[[1]]$Curve_15[i]) , x = c(MAP_Q25[[1]]$lr[i], MAP_Q25[[1]]$ur[i]))
}
plot(rnorm(1), ylim=c(MINS,MAXS), xlim=c(0,100),type="n",ylab="",main="Q75")
for(i in 1:9){
  lines(y = c(MAP_Q75[[1]]$Curve_15[i],MAP_Q75[[1]]$Curve_15[i]) , x = c(MAP_Q75[[1]]$lr[i], MAP_Q75[[1]]$ur[i]))
}
plot(rnorm(1), ylim=c(MINS,MAXS), xlim=c(0,100),type="n",ylab="",main="SD")
for(i in 1:9){
  lines(y = c(MAP_sd[[1]]$Curve_15[i],MAP_sd[[1]]$Curve_15[i]) , x = c(MAP_sd[[1]]$lr[i], MAP_sd[[1]]$ur[i]))
}
plot(rnorm(1), ylim=c(MINS,MAXS), xlim=c(0,100),type="n",ylab="",main="Max")
for(i in 1:9){
  lines(y = c(MAP_max[[1]]$Curve_15[i],MAP_max[[1]]$Curve_15[i]) , x = c(MAP_max[[1]]$lr[i], MAP_max[[1]]$ur[i]))
}
plot(rnorm(1), ylim=c(MINS,MAXS), xlim=c(0,100),type="n",ylab="",main="Min")
for(i in 1:9){
  lines(y = c(MAP_min[[1]]$Curve_15[i],MAP_min[[1]]$Curve_15[i]) , x = c(MAP_min[[1]]$lr[i], MAP_min[[1]]$ur[i]))
}
plot(rnorm(1), ylim=c(MINS,MAXS), xlim=c(0,100),type="n",ylab="",main="Range")
for(i in 1:9){
  lines(y = c(MAP_range[[1]]$Curve_15[i],MAP_range[[1]]$Curve_15[i]) , x = c(MAP_range[[1]]$lr[i], MAP_range[[1]]$ur[i]))
}
}
\references{
\itemize{
 \item \code{1-} : MÃ¶ller, A., Tutz, G., & Gertheiss, J. (2016). Random forests for functional covariates. Journal of Chemometrics, 30(12), 715-725.
}
}
